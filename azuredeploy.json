{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "functionAppName": {
      "type": "string",
      "defaultValue": "[concat('copilot365-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Function App (must be globally unique)"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('st', uniqueString(resourceGroup().id))]",
      "maxLength": 24,
      "metadata": {
        "description": "Storage Account Name (3-24 characters, lowercase and numbers only)"
      }
    },
    "openAIServiceName": {
      "type": "string",
      "defaultValue": "[concat('openai-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name for the Azure OpenAI Service (will be created for you)"
      }
    },
    "openAIModelName": {
      "type": "string",
      "defaultValue": "gpt-4o",
      "allowedValues": [
        "gpt-35-turbo",
        "gpt-4",
        "gpt-4-32k",
        "gpt-4o",
        "gpt-4o-mini"
      ],
      "metadata": {
        "description": "Azure OpenAI model to deploy (gpt-4o is latest and recommended)"
      }
    },
    "openAISku": {
      "type": "string",
      "defaultValue": "S0",
      "allowedValues": ["S0"],
      "metadata": {
        "description": "SKU for Azure OpenAI Service"
      }
    },
    "openAIDeploymentCapacity": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 1,
      "maxValue": 1000,
      "metadata": {
        "description": "Capacity for the OpenAI deployment in units of 1K TPM (Tokens Per Minute). Default is 10 (10K TPM)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "allowedValues": [
        "eastus",
        "eastus2",
        "northcentralus",
        "southcentralus",
        "westus",
        "westus3",
        "australiaeast",
        "canadaeast",
        "francecentral",
        "japaneast",
        "norwayeast",
        "swedencentral",
        "switzerlandnorth",
        "uksouth"
      ],
      "metadata": {
        "description": "Location for all resources (must support Azure OpenAI). Default: East US"
      }
    }
  },
  "variables": {
    "hostingPlanName": "[concat(parameters('functionAppName'), '-plan')]",
    "applicationInsightsName": "[concat(parameters('functionAppName'), '-insights')]",
    "fileShareName": "azfbusinessbot3c92ab",
    "functionAppId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
    "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
    "openAIResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIServiceName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2023-05-01",
      "name": "[parameters('openAIServiceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('openAISku')]"
      },
      "kind": "OpenAI",
      "properties": {
        "customSubDomainName": "[parameters('openAIServiceName')]",
        "networkAcls": {
          "defaultAction": "Allow"
        },
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2023-05-01",
      "name": "[concat(parameters('openAIServiceName'), '/gpt-deployment')]",
      "dependsOn": [
        "[variables('openAIResourceId')]"
      ],
      "sku": {
        "name": "Standard",
        "capacity": "[parameters('openAIDeploymentCapacity')]"
      },
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "[parameters('openAIModelName')]",
          "version": "2024-08-06"
        },
        "versionUpgradeOption": "OnceNewDefaultVersionAvailable",
        "raiPolicyName": "Microsoft.Default"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2022-09-01",
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "dependsOn": [
        "[variables('storageAccountId')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2022-09-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', variables('fileShareName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default')]"
      ],
      "properties": {
        "shareQuota": 5120
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "properties": {
        "perSiteScaling": false,
        "elasticScaleEnabled": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0,
        "zoneRedundant": false
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[variables('storageAccountId')]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        "[variables('openAIResourceId')]",
        "[resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('openAIServiceName'), 'gpt-deployment')]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(variables('storageAccountId'), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(variables('storageAccountId'), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(parameters('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "python"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString]"
            },
            {
              "name": "AZURE_OPENAI_API_KEY",
              "value": "[listKeys(variables('openAIResourceId'), '2023-05-01').key1]"
            },
            {
              "name": "AZURE_OPENAI_ENDPOINT",
              "value": "[reference(variables('openAIResourceId')).endpoint]"
            },
            {
              "name": "AZURE_OPENAI_API_VERSION",
              "value": "2024-02-01"
            },
            {
              "name": "AZURE_OPENAI_DEPLOYMENT_NAME",
              "value": "gpt-deployment"
            },
            {
              "name": "AZURE_FILES_SHARE_NAME",
              "value": "[variables('fileShareName')]"
            },
            {
              "name": "ASSISTANT_NAME",
              "value": "Copilot Agent 365"
            },
            {
              "name": "CHARACTERISTIC_DESCRIPTION",
              "value": "Enterprise AI assistant integrated with Microsoft 365"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true"
            },
            {
              "name": "ENABLE_ORYX_BUILD",
              "value": "true"
            },
            {
              "name": "PYTHON_ENABLE_WORKER_EXTENSIONS",
              "value": "1"
            }
          ],
          "linuxFxVersion": "python|3.11",
          "cors": {
            "allowedOrigins": ["*"],
            "supportCredentials": false
          },
          "use32BitWorkerProcess": false,
          "functionAppScaleLimit": 200,
          "minimumElasticInstanceCount": 0,
          "ftpsState": "FtpsOnly",
          "remoteDebuggingEnabled": false
        },
        "httpsOnly": true
      }
    }
  ],
  "outputs": {
    "windowsSetupScript": {
      "type": "string",
      "value": "[concat('# Copilot Agent 365 - Windows PowerShell Setup Script with Python 3.11\n# This script ensures Python 3.11 is installed (required for Azure Functions v4)\n# Save as setup.ps1 and run with: .\\setup.ps1\n\nWrite-Host \"========================================\" -ForegroundColor Cyan\nWrite-Host \"   Copilot Agent 365 - Setup (Python 3.11)\" -ForegroundColor Cyan\nWrite-Host \"========================================\" -ForegroundColor Cyan\nWrite-Host \"\"\nWrite-Host \"This script will install Python 3.11 (required for Azure Functions)\" -ForegroundColor Yellow\nWrite-Host \"\"\n\n# Check if running as Administrator\n$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")\nif (-not $isAdmin) {\n    Write-Host \"[INFO] Not running as Administrator. Some installations may require admin rights.\" -ForegroundColor Yellow\n    Write-Host \"If any installations fail, please run PowerShell as Administrator.\" -ForegroundColor Yellow\n    Write-Host \"\"\n}\n\n# Function to check if a command exists\nfunction Test-Command {\n    param($Command)\n    try {\n        Get-Command $Command -ErrorAction Stop | Out-Null\n        return $true\n    } catch {\n        return $false\n    }\n}\n\n# Check execution policy\n$executionPolicy = Get-ExecutionPolicy\nif ($executionPolicy -eq \"Restricted\") {\n    Write-Host \"Setting PowerShell execution policy...\" -ForegroundColor Yellow\n    Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force\n}\n\n# INSTALL PYTHON 3.11 SPECIFICALLY\nWrite-Host \"Checking for Python 3.11...\" -ForegroundColor Yellow\n$python311Found = $false\n$pythonCmd = $null\n\n# Check if Python 3.11 is already installed\n$pythonPaths = @(\n    \"$env:LOCALAPPDATA\\Programs\\Python\\Python311\\python.exe\",\n    \"C:\\Python311\\python.exe\",\n    \"C:\\Program Files\\Python311\\python.exe\",\n    \"C:\\Program Files (x86)\\Python311\\python.exe\"\n)\n\nforeach ($path in $pythonPaths) {\n    if (Test-Path $path) {\n        try {\n            $version = & $path --version 2>&1\n            if ($version -match \"Python 3\\.11\") {\n                Write-Host \"[OK] Found Python 3.11 at: $path\" -ForegroundColor Green\n                $pythonCmd = $path\n                $python311Found = $true\n                break\n            }\n        } catch {}\n    }\n}\n\n# Check system Python commands for 3.11\nif (-not $python311Found) {\n    $commands = @(\"python3.11\", \"python311\", \"python3\", \"python\", \"py\")\n    foreach ($cmd in $commands) {\n        if (Test-Command $cmd) {\n            try {\n                if ($cmd -eq \"py\") {\n                    # Try to use py launcher with Python 3.11\n                    $version = py -3.11 --version 2>&1\n                    if ($version -match \"Python 3\\.11\") {\n                        Write-Host \"[OK] Found Python 3.11 via py launcher\" -ForegroundColor Green\n                        $pythonCmd = \"py -3.11\"\n                        $python311Found = $true\n                        break\n                    }\n                } else {\n                    $version = & $cmd --version 2>&1\n                    if ($version -match \"Python 3\\.11\") {\n                        Write-Host \"[OK] Found Python 3.11: $version\" -ForegroundColor Green\n                        $pythonCmd = $cmd\n                        $python311Found = $true\n                        break\n                    }\n                }\n            } catch {}\n        }\n    }\n}\n\n# Install Python 3.11 if not found\nif (-not $python311Found) {\n    Write-Host \"[WARNING] Python 3.11 not found. Installing Python 3.11...\" -ForegroundColor Yellow\n    Write-Host \"This will take a few minutes...\" -ForegroundColor Gray\n    \n    $pythonInstaller = \"$env:TEMP\\python-3.11-installer.exe\"\n    # Use Python 3.11.9 which is the latest 3.11 release\n    $pythonUrl = \"https://www.python.org/ftp/python/3.11.9/python-3.11.9-amd64.exe\"\n    \n    Write-Host \"Downloading Python 3.11 installer...\" -ForegroundColor Gray\n    Invoke-WebRequest -Uri $pythonUrl -OutFile $pythonInstaller -UseBasicParsing\n    \n    Write-Host \"Installing Python 3.11 (this may take 2-3 minutes)...\" -ForegroundColor Yellow\n    Start-Process -FilePath $pythonInstaller -ArgumentList \"/quiet\", \"InstallAllUsers=1\", \"PrependPath=1\", \"Include_test=0\" -Wait\n    \n    # Refresh PATH\n    $env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n    \n    # Check installation paths again\n    foreach ($path in $pythonPaths) {\n        if (Test-Path $path) {\n            try {\n                $version = & $path --version 2>&1\n                if ($version -match \"Python 3\\.11\") {\n                    Write-Host \"[OK] Python 3.11 installed successfully at: $path\" -ForegroundColor Green\n                    $pythonCmd = $path\n                    $python311Found = $true\n                    break\n                }\n            } catch {}\n        }\n    }\n    \n    if (-not $python311Found) {\n        Write-Host \"[ERROR] Python 3.11 installation failed.\" -ForegroundColor Red\n        Write-Host \"Please install Python 3.11 manually from: https://www.python.org/downloads/release/python-3119/\" -ForegroundColor Yellow\n        Read-Host \"Press Enter to exit\"\n        exit 1\n    }\n    \n    Remove-Item $pythonInstaller -Force -ErrorAction SilentlyContinue\n}\n\nWrite-Host \"Using Python command: $pythonCmd\" -ForegroundColor Green\n\n# INSTALL GIT IF NOT FOUND\nWrite-Host \"Checking for Git...\" -ForegroundColor Yellow\nif (Test-Command \"git\") {\n    $gitVersion = git --version\n    Write-Host \"[OK] Found $gitVersion\" -ForegroundColor Green\n} else {\n    Write-Host \"[WARNING] Git not found. Installing Git...\" -ForegroundColor Yellow\n    \n    if (Test-Command \"winget\") {\n        Write-Host \"Installing Git via winget...\" -ForegroundColor Gray\n        winget install --id Git.Git -e --silent --accept-package-agreements --accept-source-agreements\n    } else {\n        $gitInstaller = \"$env:TEMP\\git-installer.exe\"\n        $gitUrl = \"https://github.com/git-for-windows/git/releases/download/v2.43.0.windows.1/Git-2.43.0-64-bit.exe\"\n        \n        Write-Host \"Downloading Git installer...\" -ForegroundColor Gray\n        Invoke-WebRequest -Uri $gitUrl -OutFile $gitInstaller -UseBasicParsing\n        \n        Write-Host \"Installing Git (this may take a minute)...\" -ForegroundColor Yellow\n        Start-Process -FilePath $gitInstaller -ArgumentList \"/VERYSILENT\", \"/NORESTART\" -Wait\n        \n        Remove-Item $gitInstaller -Force -ErrorAction SilentlyContinue\n    }\n    \n    $env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n    \n    if (Test-Command \"git\") {\n        Write-Host \"[OK] Git installed successfully\" -ForegroundColor Green\n    } else {\n        Write-Host \"[ERROR] Git installation failed\" -ForegroundColor Red\n        Read-Host \"Press Enter to exit\"\n        exit 1\n    }\n}\n\n# INSTALL NODE.JS IF NOT FOUND\nWrite-Host \"Checking for Node.js...\" -ForegroundColor Yellow\nif (Test-Command \"node\") {\n    $nodeVersion = node --version\n    Write-Host \"[OK] Found Node.js $nodeVersion\" -ForegroundColor Green\n} else {\n    Write-Host \"[WARNING] Node.js not found. Installing Node.js...\" -ForegroundColor Yellow\n    \n    if (Test-Command \"winget\") {\n        Write-Host \"Installing Node.js via winget...\" -ForegroundColor Gray\n        winget install --id OpenJS.NodeJS.LTS -e --silent --accept-package-agreements --accept-source-agreements\n    } else {\n        $nodeInstaller = \"$env:TEMP\\node-installer.msi\"\n        $nodeUrl = \"https://nodejs.org/dist/v20.11.0/node-v20.11.0-x64.msi\"\n        \n        Write-Host \"Downloading Node.js installer...\" -ForegroundColor Gray\n        Invoke-WebRequest -Uri $nodeUrl -OutFile $nodeInstaller -UseBasicParsing\n        \n        Write-Host \"Installing Node.js (this may take a minute)...\" -ForegroundColor Yellow\n        Start-Process msiexec.exe -ArgumentList \"/i\", $nodeInstaller, \"/quiet\", \"/norestart\" -Wait\n        \n        Remove-Item $nodeInstaller -Force -ErrorAction SilentlyContinue\n    }\n    \n    $env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n    \n    if (Test-Command \"node\") {\n        $nodeVersion = node --version\n        Write-Host \"[OK] Node.js installed successfully: $nodeVersion\" -ForegroundColor Green\n    } else {\n        Write-Host \"[ERROR] Node.js installation failed\" -ForegroundColor Red\n        Read-Host \"Press Enter to exit\"\n        exit 1\n    }\n}\n\n# Check for npm\nWrite-Host \"Checking for npm...\" -ForegroundColor Yellow\nif (Test-Command \"npm\") {\n    $npmVersion = npm --version\n    Write-Host \"[OK] Found npm $npmVersion\" -ForegroundColor Green\n} else {\n    Write-Host \"[ERROR] npm not found!\" -ForegroundColor Red\n    Read-Host \"Press Enter to exit\"\n    exit 1\n}\n\n# INSTALL AZURE FUNCTIONS CORE TOOLS\nWrite-Host \"Checking for Azure Functions Core Tools...\" -ForegroundColor Yellow\nif (Test-Command \"func\") {\n    $funcVersion = func --version\n    Write-Host \"[OK] Found Azure Functions Core Tools $funcVersion\" -ForegroundColor Green\n} else {\n    Write-Host \"[WARNING] Azure Functions Core Tools not found\" -ForegroundColor Yellow\n    Write-Host \"Installing Azure Functions Core Tools...\" -ForegroundColor Yellow\n    npm install -g azure-functions-core-tools@4\n    \n    $env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n    \n    if (Test-Command \"func\") {\n        Write-Host \"[OK] Azure Functions Core Tools installed successfully\" -ForegroundColor Green\n    } else {\n        Write-Host \"[WARNING] Could not install Azure Functions Core Tools\" -ForegroundColor Yellow\n    }\n}\n\n# INSTALL AZURE CLI (optional)\nWrite-Host \"Checking for Azure CLI...\" -ForegroundColor Yellow\nif (Test-Command \"az\") {\n    Write-Host \"[OK] Found Azure CLI\" -ForegroundColor Green\n} else {\n    Write-Host \"[INFO] Azure CLI not found (optional for deployment)\" -ForegroundColor Yellow\n}\n\nWrite-Host \"\"\nWrite-Host \"======================================\" -ForegroundColor Green\nWrite-Host \"All prerequisites installed/verified!\" -ForegroundColor Green\nWrite-Host \"======================================\" -ForegroundColor Green\nWrite-Host \"\"\n\n# Clone or update repository\nWrite-Host \"Setting up project repository...\" -ForegroundColor Yellow\nif (Test-Path \"Copilot-Agent-365\") {\n    Write-Host \"Updating existing repository...\" -ForegroundColor Gray\n    Set-Location \"Copilot-Agent-365\"\n    git pull\n} else {\n    Write-Host \"Cloning repository...\" -ForegroundColor Gray\n    git clone https://github.com/kody-w/Copilot-Agent-365.git\n    if (Test-Path \"Copilot-Agent-365\") {\n        Write-Host \"[OK] Repository cloned successfully\" -ForegroundColor Green\n        Set-Location \"Copilot-Agent-365\"\n    } else {\n        Write-Host \"[ERROR] Failed to clone repository\" -ForegroundColor Red\n        Read-Host \"Press Enter to exit\"\n        exit 1\n    }\n}\n\n# Create local.settings.json with actual Azure values from deployment\nWrite-Host \"Creating configuration file...\" -ForegroundColor Yellow\n$settings = @{\n    IsEncrypted = $false\n    Values = @{\n        AzureWebJobsStorage = \"', concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(variables('storageAccountId'), '2022-09-01').keys[0].value), '\"\n        FUNCTIONS_WORKER_RUNTIME = \"python\"\n        AZURE_OPENAI_API_KEY = \"', listKeys(variables('openAIResourceId'), '2023-05-01').key1, '\"\n        AZURE_OPENAI_ENDPOINT = \"', reference(variables('openAIResourceId')).endpoint, '\"\n        AZURE_OPENAI_API_VERSION = \"2024-02-01\"\n        AZURE_OPENAI_DEPLOYMENT_NAME = \"gpt-deployment\"\n        AZURE_FILES_SHARE_NAME = \"', variables('fileShareName'), '\"\n        ASSISTANT_NAME = \"Copilot Agent 365\"\n        CHARACTERISTIC_DESCRIPTION = \"Enterprise AI assistant integrated with Microsoft 365\"\n    }\n}\n$settings | ConvertTo-Json -Depth 3 | Set-Content \"local.settings.json\"\nWrite-Host \"[OK] Configuration file created with your Azure deployment values\" -ForegroundColor Green\n\n# Deploy to Azure (optional)\nif (Test-Command \"az\") {\n    Write-Host \"\"\n    Write-Host \"Preparing Azure deployment...\" -ForegroundColor Yellow\n    Write-Host \"Deploying to Azure...\" -ForegroundColor Yellow\n    \n    if (Test-Path \"deploy.zip\") { Remove-Item \"deploy.zip\" }\n    \n    Write-Host \"Creating deployment package...\" -ForegroundColor Gray\n    Compress-Archive -Path * -DestinationPath deploy.zip -Force -CompressionLevel Optimal\n    \n    Write-Host \"Uploading to Azure (this may take a minute)...\" -ForegroundColor Gray\n    az functionapp deployment source config-zip --resource-group \"', resourceGroup().name, '\" --name \"', parameters('functionAppName'), '\" --src deploy.zip\n    \n    if ($LASTEXITCODE -eq 0) {\n        Write-Host \"[OK] Successfully deployed to Azure!\" -ForegroundColor Green\n    } else {\n        Write-Host \"[WARNING] Azure deployment failed - run ''az login'' first\" -ForegroundColor Yellow\n    }\n    \n    if (Test-Path \"deploy.zip\") { Remove-Item \"deploy.zip\" }\n} else {\n    Write-Host \"[INFO] Azure CLI not installed - skipping deployment\" -ForegroundColor Yellow\n}\n\n# Setup Python environment\nWrite-Host \"\"\nWrite-Host \"Setting up Python 3.11 virtual environment...\" -ForegroundColor Yellow\n\nif (Test-Path \".venv\") {\n    Write-Host \"Removing existing virtual environment...\" -ForegroundColor Gray\n    Remove-Item -Recurse -Force \".venv\"\n}\n\nWrite-Host \"Creating virtual environment with Python 3.11...\" -ForegroundColor Gray\n\n# FIXED: Handle Python paths with spaces properly\nif ($pythonCmd -match \" -\") {\n    # Handle commands like \"py -3.11\"\n    $parts = $pythonCmd -split \" \", 2\n    & $parts[0] $parts[1] -m venv .venv\n} elseif ($pythonCmd -match \" \") {\n    # Handle paths with spaces like \"C:\\Program Files\\Python311\\python.exe\"\n    # Use Invoke-Expression for paths with spaces\n    $venvCommand = \"& `\"$pythonCmd`\" -m venv .venv\"\n    Invoke-Expression $venvCommand\n} else {\n    # Simple command without spaces\n    & $pythonCmd -m venv .venv\n}\n\nif (Test-Path \".venv\") {\n    Write-Host \"[OK] Virtual environment created\" -ForegroundColor Green\n} else {\n    Write-Host \"[ERROR] Failed to create virtual environment\" -ForegroundColor Red\n    Write-Host \"Trying alternative method...\" -ForegroundColor Yellow\n    \n    # Alternative: Try using the short path name\n    $shortPath = (New-Object -ComObject Scripting.FileSystemObject).GetFile($pythonCmd).ShortPath\n    if ($shortPath) {\n        Write-Host \"Using short path: $shortPath\" -ForegroundColor Gray\n        & $shortPath -m venv .venv\n    }\n    \n    if (Test-Path \".venv\") {\n        Write-Host \"[OK] Virtual environment created with alternative method\" -ForegroundColor Green\n    } else {\n        Write-Host \"[ERROR] Could not create virtual environment\" -ForegroundColor Red\n        Write-Host \"Please try running this command manually:\" -ForegroundColor Yellow\n        Write-Host \"  `\"$pythonCmd`\" -m venv .venv\" -ForegroundColor White\n        Read-Host \"Press Enter to exit\"\n        exit 1\n    }\n}\n\nWrite-Host \"Installing Python packages...\" -ForegroundColor Yellow\n& \".\\.venv\\Scripts\\python.exe\" -m pip install --upgrade pip --quiet\n\nif (Test-Path \"requirements.txt\") {\n    Write-Host \"Installing from requirements.txt...\" -ForegroundColor Gray\n    & \".\\.venv\\Scripts\\pip.exe\" install -r requirements.txt\n} else {\n    Write-Host \"Installing default packages...\" -ForegroundColor Gray\n    & \".\\.venv\\Scripts\\pip.exe\" install openai==1.55.3\n    & \".\\.venv\\Scripts\\pip.exe\" install httpx==0.27.2\n    & \".\\.venv\\Scripts\\pip.exe\" install azure-functions==1.18.0\n    & \".\\.venv\\Scripts\\pip.exe\" install azure-storage-file==2.1.0\n    & \".\\.venv\\Scripts\\pip.exe\" install \"pydantic==1.10.13\"\n}\nWrite-Host \"[OK] Python packages installed\" -ForegroundColor Green\n\n# Create run scripts\nWrite-Host \"\"\nWrite-Host \"Creating run scripts...\" -ForegroundColor Yellow\n\n$runPs1Content = @''\n# Copilot Agent 365 - Run Script\nWrite-Host \"Starting Copilot Agent 365...\" -ForegroundColor Cyan\nWrite-Host \"\"\n\n# Activate virtual environment\n& \".\\.venv\\Scripts\\Activate.ps1\"\n\nWrite-Host \"Local URL: http://localhost:7071/api/businessinsightbot_function\" -ForegroundColor Green\nWrite-Host \"Press Ctrl+C to stop\" -ForegroundColor Yellow\nWrite-Host \"\"\n\n# Start the function with Python 3.11\nfunc start\n''@\nSet-Content -Path \"run.ps1\" -Value $runPs1Content\n\n$runBatContent = @''\n@echo off\necho Starting Copilot Agent 365...\ncall .venv\\Scripts\\activate.bat\necho.\necho Local URL: http://localhost:7071/api/businessinsightbot_function\necho Press Ctrl+C to stop\necho.\nfunc start\n''@\nSet-Content -Path \"run.bat\" -Value $runBatContent\n\nWrite-Host \"[OK] Run scripts created (run.ps1 and run.bat)\" -ForegroundColor Green\n\n# Complete!\nWrite-Host \"\"\nWrite-Host \"================================================\" -ForegroundColor Green\nWrite-Host \"     SETUP COMPLETE! Everything is ready!\" -ForegroundColor Green\nWrite-Host \"     Using Python 3.11 (Azure Functions compatible)\" -ForegroundColor Green\nWrite-Host \"================================================\" -ForegroundColor Green\nWrite-Host \"\"\n\nWrite-Host \"Azure Function URL:\" -ForegroundColor Cyan\nWrite-Host \"  https://', reference(variables('functionAppId')).defaultHostName, '/api/businessinsightbot_function?code=', listkeys(concat(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '/host/default'), '2022-03-01').functionKeys.default, '\" -ForegroundColor White\nWrite-Host \"\"\n\nWrite-Host \"To run locally:\" -ForegroundColor Cyan\nWrite-Host \"  .\\run.ps1  (PowerShell)\" -ForegroundColor White\nWrite-Host \"  run.bat    (Command Prompt)\" -ForegroundColor White\nWrite-Host \"\"\n\nWrite-Host \"Test with PowerShell:\" -ForegroundColor Cyan\n$testCommand = ''Invoke-RestMethod -Uri \"http://localhost:7071/api/businessinsightbot_function\" -Method Post -Body \"{`\"user_input`\":`\"Hello`\",`\"conversation_history`\":[]}\" -ContentType \"application/json\"''\nWrite-Host \"  $testCommand\" -ForegroundColor White\nWrite-Host \"\"\n\n$response = Read-Host \"Would you like to start the local server now? (y/n)\"\nif ($response -eq ''y'' -or $response -eq ''Y'') {\n    & .\\run.ps1\n} else {\n    Write-Host \"\"\n    Write-Host \"Setup complete! Run ''.\\run.ps1'' whenever you want to start the bot.\" -ForegroundColor Green\n}\n')]"
    },
    "macLinuxSetupScript": {
      "type": "string",
      "value": "[concat('#!/bin/bash\n# Copilot Agent 365 - Mac/Linux Setup Script with Python 3.11\n# Save this as setup.sh and run: bash setup.sh\n\nset -e\n\n# Colors for output\nRED=\"\\033[0;31m\"\nGREEN=\"\\033[0;32m\"\nYELLOW=\"\\033[1;33m\"\nCYAN=\"\\033[0;36m\"\nNC=\"\\033[0m\"\n\necho -e \"${CYAN}╔════════════════════════════════════════════════╗${NC}\"\necho -e \"${CYAN}║   Copilot Agent 365 - Mac/Linux Setup (3.11)  ║${NC}\"\necho -e \"${CYAN}╚════════════════════════════════════════════════╝${NC}\"\necho\n\n# Function to check command exists\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# Function to check Python version\ncheck_python_version() {\n    local cmd=$1\n    if command_exists $cmd; then\n        local version=$($cmd --version 2>&1 | grep -oE \"[0-9]+\\.[0-9]+\" | head -1)\n        local major=$(echo $version | cut -d. -f1)\n        local minor=$(echo $version | cut -d. -f2)\n        # Only accept Python 3.9 through 3.11 for Azure Functions v4\n        if [ \"$major\" -eq 3 ] && [ \"$minor\" -ge 9 ] && [ \"$minor\" -le 11 ]; then\n            echo $cmd\n            return 0\n        fi\n    fi\n    return 1\n}\n\n# Check for Python (3.9 to 3.11 only)\necho -e \"${YELLOW}▶ Checking prerequisites...${NC}\"\nMISSING=\"\"\nPYTHON_CMD=\"\"\nPYTHON_VERSION=\"\"\n\n# Try different Python commands, preferring 3.11\nfor cmd in python3.11 python3.10 python3.9 python3 python; do\n    if result=$(check_python_version $cmd); then\n        PYTHON_CMD=$result\n        PYTHON_VERSION=$($cmd --version 2>&1 | grep -oE \"[0-9]+\\.[0-9]+\\.[0-9]+\")\n        break\n    fi\ndone\n\nif [ -z \"$PYTHON_CMD\" ]; then\n    MISSING=\"${MISSING}\\n  - Python 3.9-3.11 (Azure Functions requirement)\\n    Mac: brew install python@3.11\\n    Ubuntu/Debian: sudo apt-get install python3.11\\n    RHEL/CentOS: sudo yum install python311\\n    Or download from: python.org/downloads/release/python-3119/\"\nelse\n    echo -e \"${GREEN}✓ Found Python $PYTHON_VERSION (Azure Functions compatible)${NC}\"\nfi\n\n# Check for Git\nif ! command_exists git; then\n    MISSING=\"${MISSING}\\n  - Git (install: brew install git OR apt-get install git)\"\nelse\n    echo -e \"${GREEN}✓ Found Git${NC}\"\nfi\n\n# Check for Node.js and npm\nif ! command_exists node; then\n    MISSING=\"${MISSING}\\n  - Node.js (install: brew install node OR download from nodejs.org)\"\nelse\n    echo -e \"${GREEN}✓ Found Node.js$(node --version)${NC}\"\nfi\n\n# Check for Azure Functions Core Tools\nif ! command_exists func; then\n    MISSING=\"${MISSING}\\n  - Azure Functions Core Tools (run: npm install -g azure-functions-core-tools@4)\"\nelse\n    echo -e \"${GREEN}✓ Found Azure Functions Core Tools${NC}\"\nfi\n\n# Check for Azure CLI (optional but recommended)\nif ! command_exists az; then\n    echo -e \"${YELLOW}⚠ Azure CLI not found (optional for deployment)${NC}\"\n    echo -e \"${YELLOW}  Mac: brew install azure-cli${NC}\"\n    echo -e \"${YELLOW}  Linux: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash${NC}\"\nelse\n    echo -e \"${GREEN}✓ Found Azure CLI${NC}\"\nfi\n\nif [ ! -z \"$MISSING\" ]; then\n    echo -e \"${RED}Missing prerequisites:${MISSING}${NC}\"\n    echo -e \"${YELLOW}Install missing tools and run this script again${NC}\"\n    exit 1\nfi\n\necho -e \"${GREEN}✓ All prerequisites found${NC}\"\n\n# Clone or update repository\necho -e \"${YELLOW}▶ Setting up project...${NC}\"\nif [ -d \"Copilot-Agent-365\" ]; then\n    cd Copilot-Agent-365\n    git pull\nelse\n    git clone https://github.com/kody-w/Copilot-Agent-365.git\n    cd Copilot-Agent-365\nfi\n\n# Create local.settings.json with actual Azure values from deployment\necho -e \"${YELLOW}▶ Creating configuration...${NC}\"\ncat > local.settings.json << EOF\n{\n  \"IsEncrypted\": false,\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"', concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(variables('storageAccountId'), '2022-09-01').keys[0].value), '\",\n    \"FUNCTIONS_WORKER_RUNTIME\": \"python\",\n    \"AZURE_OPENAI_API_KEY\": \"', listKeys(variables('openAIResourceId'), '2023-05-01').key1, '\",\n    \"AZURE_OPENAI_ENDPOINT\": \"', reference(variables('openAIResourceId')).endpoint, '\",\n    \"AZURE_OPENAI_API_VERSION\": \"2024-02-01\",\n    \"AZURE_OPENAI_DEPLOYMENT_NAME\": \"gpt-deployment\",\n    \"AZURE_FILES_SHARE_NAME\": \"', variables('fileShareName'), '\",\n    \"ASSISTANT_NAME\": \"Copilot Agent 365\",\n    \"CHARACTERISTIC_DESCRIPTION\": \"Enterprise AI assistant integrated with Microsoft 365\"\n  }\n}\nEOF\necho -e \"${GREEN}✓ Configuration created with your Azure deployment values${NC}\"\n\n# Deploy to Azure if az CLI is available\nif command_exists az; then\n    echo -e \"${YELLOW}▶ Deploying code to Azure...${NC}\"\n    zip -r deploy.zip . -x \"*.git*\" -x \".venv/*\" -x \"local.settings.json\" > /dev/null 2>&1\n    az functionapp deployment source config-zip --resource-group \"', resourceGroup().name, '\" --name \"', parameters('functionAppName'), '\" --src deploy.zip\n    rm deploy.zip\n    echo -e \"${GREEN}✓ Code deployed to Azure${NC}\"\nelse\n    echo -e \"${YELLOW}⚠ Skipping Azure deployment (Azure CLI not installed)${NC}\"\nfi\n\n# Setup Python environment\necho -e \"${YELLOW}▶ Setting up Python environment...${NC}\"\nrm -rf .venv 2>/dev/null || true\n$PYTHON_CMD -m venv .venv\n\n# Activate virtual environment\nif [ -f \".venv/bin/activate\" ]; then\n    source .venv/bin/activate\nelse\n    source .venv/Scripts/activate\nfi\n\npip install --upgrade pip > /dev/null 2>&1\n\n# Install packages with fixed versions for compatibility\nif [ -f \"requirements.txt\" ]; then\n    echo -e \"${YELLOW}▶ Installing from requirements.txt...${NC}\"\n    pip install -r requirements.txt\nelse\n    echo -e \"${YELLOW}▶ Installing packages (Python 3.9-3.11 compatible)...${NC}\"\n    pip install openai==1.55.3\n    pip install httpx==0.27.2\n    pip install azure-functions==1.18.0\n    pip install azure-storage-file==2.1.0\n    pip install pydantic==1.10.13\nfi\n\necho -e \"${GREEN}✓ Python environment ready${NC}\"\n\n# Create run script\ncat > run.sh << RUNSCRIPT\n#!/bin/bash\nif [ -f \".venv/bin/activate\" ]; then\n    source .venv/bin/activate\nelse\n    source .venv/Scripts/activate\nfi\necho \"Starting Copilot Agent 365...\"\necho \"Local URL: http://localhost:7071/api/businessinsightbot_function\"\necho \"Press Ctrl+C to stop\"\nfunc start\nRUNSCRIPT\nchmod +x run.sh\n\n# Complete!\necho\necho -e \"${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"\necho -e \"${GREEN}✨ Setup Complete! Bot deployed and ready! ✨${NC}\"\necho -e \"${GREEN}   Using Python $PYTHON_VERSION (Azure compatible)${NC}\"\necho -e \"${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\"\necho\necho -e \"${CYAN}Azure Function URL:${NC}\"\necho \"  https://', reference(variables('functionAppId')).defaultHostName, '/api/businessinsightbot_function?code=', listkeys(concat(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '/host/default'), '2022-03-01').functionKeys.default, '\"\necho\necho -e \"${CYAN}To run locally:${NC}\"\necho \"  ./run.sh\"\necho\necho -e \"${CYAN}Test command:${NC}\"\necho \"  curl -X POST http://localhost:7071/api/businessinsightbot_function \\\\\"\necho \"    -H \\\"Content-Type: application/json\\\" \\\\\"\necho \"    -d {\\\"user_input\\\": \\\"Hello\\\", \\\"conversation_history\\\": []}\"\necho\necho -e \"${YELLOW}Would you like to start the local server now? (y/n)${NC}\"\nread -r START_NOW\nif [ \"$START_NOW\" = \"y\" ] || [ \"$START_NOW\" = \"Y\" ]; then\n    ./run.sh\nfi\n')]"
    },
    "setupInstructions": {
      "type": "string",
      "value": "🚀 SETUP INSTRUCTIONS - Python 3.11 Compatible:\n\n📱 FOR WINDOWS (PowerShell):\n1. Copy the entire 'windowsSetupScript' value above\n2. Save as 'setup.ps1' on your computer\n3. Run in PowerShell: .\\setup.ps1\n   (If you get an execution policy error, first run: Set-ExecutionPolicy RemoteSigned -Scope CurrentUser)\n\n🍎 FOR MAC/LINUX:\n1. Copy the entire 'macLinuxSetupScript' value above\n2. Save as 'setup.sh' and run: bash setup.sh\n\n✨ FEATURES:\n- Automatically installs Python 3.11 (required for Azure Functions v4)\n- Handles Python paths with spaces (e.g., C:\\Program Files\\Python311)\n- Creates local.settings.json with YOUR actual Azure deployment values\n- Prevents Python 3.13 compatibility issues\n- Works with Azure Functions Core Tools v4\n\n✅ The scripts automatically configure all Azure connection strings from this deployment!"
    },
    "functionAppName": {
      "type": "string",
      "value": "[parameters('functionAppName')]"
    },
    "functionAppUrl": {
      "type": "string",
      "value": "[concat('https://', reference(variables('functionAppId')).defaultHostName)]"
    },
    "functionEndpoint": {
      "type": "string",
      "value": "[concat('https://', reference(variables('functionAppId')).defaultHostName, '/api/businessinsightbot_function')]"
    },
    "functionUrlWithKey": {
      "type": "string",
      "value": "[concat('https://', reference(variables('functionAppId')).defaultHostName, '/api/businessinsightbot_function?code=', listkeys(concat(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '/host/default'), '2022-03-01').functionKeys.default)]"
    },
    "openAIEndpoint": {
      "type": "string",
      "value": "[reference(variables('openAIResourceId')).endpoint]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "pythonCompatibilityNote": {
      "type": "string",
      "value": "⚠️ IMPORTANT: This deployment uses Python 3.11 which is fully compatible with Azure Functions v4. The setup scripts handle Python paths with spaces (like C:\\Program Files\\Python311) correctly. Do NOT use Python 3.12+ as they may cause compatibility issues with Azure Functions Core Tools."
    }
  }
}